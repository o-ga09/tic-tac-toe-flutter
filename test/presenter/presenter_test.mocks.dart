// Mocks generated by Mockito 5.4.2 from annotations
// in tic_tac_toe_fluttrer/test/presenter/presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tic_tac_toe_fluttrer/domain/entity.dart' as _i4;
import 'package:tic_tac_toe_fluttrer/state/state.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GameState].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameState extends _i1.Mock implements _i2.GameState {
  @override
  List<List<int>> get board => (super.noSuchMethod(
        Invocation.getter(#board),
        returnValue: <List<int>>[],
        returnValueForMissingStub: <List<int>>[],
      ) as List<List<int>>);
  @override
  set board(List<List<int>>? _board) => super.noSuchMethod(
        Invocation.setter(
          #board,
          _board,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i3.Color> get boardcolor => (super.noSuchMethod(
        Invocation.getter(#boardcolor),
        returnValue: <_i3.Color>[],
        returnValueForMissingStub: <_i3.Color>[],
      ) as List<_i3.Color>);
  @override
  set boardcolor(List<_i3.Color>? _boardcolor) => super.noSuchMethod(
        Invocation.setter(
          #boardcolor,
          _boardcolor,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool setBoard(_i4.Koma? koma) => (super.noSuchMethod(
        Invocation.method(
          #setBoard,
          [koma],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int posConvert(
    int? x,
    int? y,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #posConvert,
          [
            x,
            y,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
